CREATE TABLE actor (
  actor_id number(4,0) NOT NULL,
  first_name VARCHAR2(45) NOT NULL,
  last_name VARCHAR2(45) NOT NULL,
  last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "ACTOR_PK" PRIMARY KEY (actor_id)
);
CREATE INDEX  idx_actor_last_name  ON actor(last_name);

CREATE TABLE category (
  category_id number(4,0) NOT NULL,
  name VARCHAR2(25) NOT NULL,
   last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "CATEGORY_PK" PRIMARY KEY (category_id)
);
CREATE TABLE film_text (
  film_id number(4,0) NOT NULL,
  title VARCHAR2(255) NOT NULL,
  description varchar2(255),
  CONSTRAINT "FILM_PK" PRIMARY KEY (film_id)
 );

 create index idx_title_description on film_text(title,description);

  CREATE TABLE language (
  language_id number(4,0) NOT NULL,
  name CHAR(20) NOT NULL,
  last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "LANGUAGE_PK" PRIMARY KEY (language_id)
);


CREATE TABLE film (
  film_id number(4,0) NOT NULL,
  title VARCHAR2(255) NOT NULL,
  description varchar2(255) DEFAULT NULL,
  release_year number(4,0) DEFAULT NULL,
  language_id number(4,0) NOT NULL,
  original_language_id number(4,0) DEFAULT NULL,
  rental_duration number(4,0) DEFAULT 3 NOT NULL,
  rental_rate number(4,2) DEFAULT 4.99 NOT NULL,
  length number(4,0) DEFAULT NULL,
  replacement_cost number(5,2) DEFAULT 19.99 NOT NULL,
  rating varchar2(100) DEFAULT 'G',
  special_features varchar2(255) DEFAULT NULL,
  last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "FILM1_PK" PRIMARY KEY (film_id),
  constraint check_rating check (rating in ('G','PG','PG-13','R','NC-17')),
  constraint check_special_features check (special_features in ('Trailers','Commentaries','Deleted Scenes','Behind the Scenes')),
  CONSTRAINT fk_film_language FOREIGN KEY (language_id) REFERENCES language (language_id),
  CONSTRAINT fk_film_language_original FOREIGN KEY (original_language_id) REFERENCES language (language_id)
);

create index idx_title on film(title);
create index idx_fk_language_id on film(language_id);
create index idx_fk_original_language_id on film(original_language_id);

CREATE TABLE film_category (
  film_id number(4,0)  NOT NULL,
  category_id number(4,0) NOT NULL,
  last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "FILM_CATEGORY_PK" PRIMARY KEY (film_id,category_id),
  CONSTRAINT fk_film_category_film FOREIGN KEY (film_id) REFERENCES film (film_id),
  CONSTRAINT fk_film_category_category FOREIGN KEY (category_id) REFERENCES category (category_id)
);

CREATE TABLE country (
  country_id number(4,0) NOT NULL,
  country VARCHAR2(50) NOT NULL,
  last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "COUNTRY_PK" PRIMARY KEY (country_id)
);

CREATE TABLE city (
  city_id number(4,0) NOT NULL,
  city VARCHAR2(50) NOT NULL,
  country_id number(4,0) NOT NULL,
  last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "CITY_PK" PRIMARY KEY (city_id),
  CONSTRAINT fk_city_country FOREIGN KEY (country_id) REFERENCES country (country_id)
);
create index idx_fk_country_id on city(country_id);
CREATE TABLE address (
  address_id number(4,0) NOT NULL,
  address VARCHAR2(50) NOT NULL,
  address2 VARCHAR2(50) DEFAULT NULL,
  district VARCHAR2(50) null,
  city_id number(4,0) NOT NULL,
  postal_code VARCHAR2(10) DEFAULT NULL,
  phone VARCHAR2(20) null,
  last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "ADDRESS_PK" PRIMARY KEY (address_id),
  CONSTRAINT fk_address_city FOREIGN KEY (city_id) REFERENCES city (city_id)
);
create index idx_fk_city_id on address(city_id);

CREATE TABLE staff (
  staff_id number(4,0) NOT NULL,
  first_name VARCHAR2(45) NOT NULL,
  last_name VARCHAR2(45) NOT NULL,
  address_id number(4,0) NOT NULL,
  picture CLOB DEFAULT NULL,
  email VARCHAR2(50) DEFAULT NULL,
  store_id number(4,0) NOT NULL,
  active number(1,0) DEFAULT 1 NOT NULL ,
  username VARCHAR2(16) NOT NULL,
  password VARCHAR2(40) DEFAULT NULL,
  last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "STAFF_PK" PRIMARY KEY (staff_id),
  CONSTRAINT fk_staff_address FOREIGN KEY (address_id) REFERENCES address (address_id)
);

create index idx_fk_store_id on staff(store_id);
create index idx_fk_address_id on staff(address_id);

CREATE TABLE store (
  store_id number(4,0) NOT NULL,
  manager_staff_id number(4,0) NOT NULL,
  address_id number(4,0) NOT NULL,
  last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "STORE_PK" PRIMARY KEY (store_id),
  CONSTRAINT fk_store_address FOREIGN KEY (address_id) REFERENCES address (address_id),
  CONSTRAINT idx_unique_manager UNIQUE (manager_staff_id)
);

create index idx_fk_address_id1 on store(address_id);

ALTER TABLE staff ADD CONSTRAINT fk_staff_store FOREIGN KEY (store_id) REFERENCES store(store_id);

ALTER TABLE store ADD CONSTRAINT fk_store_staff FOREIGN KEY (manager_staff_id) REFERENCES staff (staff_id);


  CREATE TABLE inventory (
  inventory_id number(6,0) NOT NULL,
  film_id number(4,0) NOT NULL,
  store_id number(4,0) NOT NULL,
  last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "INVENTORY_PK" PRIMARY KEY (inventory_id),
  CONSTRAINT fk_inventory_store FOREIGN KEY (store_id) REFERENCES store (store_id),
  CONSTRAINT fk_inventory_film FOREIGN KEY (film_id) REFERENCES film (film_id)
);

create index idx_fk_film_id on inventory(film_id);
create index idx_store_id_film_id on inventory(store_id, film_id);

CREATE TABLE customer (
  customer_id number(4,0) NOT NULL,
  store_id number(4,0) NOT NULL,
  first_name VARCHAR2(45) NOT NULL,
  last_name VARCHAR2(45) NOT NULL,
  email VARCHAR2(50) NOT NULL,
  address_id number(4,0) NOT NULL,
  active NUMBER(1,0) NOT NULL,
  create_date timestamp NOT NULL,
  last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "CUSTOMER_PK" PRIMARY KEY (customer_id),
  CONSTRAINT fk_customer_address FOREIGN KEY (address_id) REFERENCES address (address_id),
  CONSTRAINT fk_customer_store FOREIGN KEY (store_id) REFERENCES store (store_id)
);

create index idx_fk_store_id1 on customer(store_id);
create index idx_fk_address_id2 on customer(address_id);
create index idx_last_name on customer(last_name);


CREATE TABLE rental (
  rental_id number(10,0) NOT NULL,
  rental_date timestamp NOT NULL,
  inventory_id number(6,0) NOT NULL,
  customer_id number(4,0) NOT NULL,
  return_date timestamp DEFAULT NULL,
  staff_id number(4,0) NOT NULL,
  last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "RENTAL_PK" PRIMARY KEY (rental_id),
  CONSTRAINT fk_rental_staff FOREIGN KEY (staff_id) REFERENCES staff (staff_id),
  CONSTRAINT fk_rental_inventory FOREIGN KEY (inventory_id) REFERENCES inventory (inventory_id),
  CONSTRAINT fk_rental_customer FOREIGN KEY (customer_id) REFERENCES customer (customer_id),
  CONSTRAINT unique_ric UNIQUE (rental_date,inventory_id,customer_id)
);
create index idx_fk_inventory_id on rental(inventory_id);
create index idx_fk_customer_id1 on rental(customer_id);
create index idx_fk_staff_id1 on rental(staff_id);

CREATE TABLE payment (
  payment_id number(10,0) NOT NULL,
  customer_id number(4,0) NOT NULL,
  staff_id number(4,0) NOT NULL,
  rental_id number(10,0) NULL,
  amount number(5,2) NOT NULL,
  payment_date timestamp NOT NULL,
  last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "PAYMENT_PK" PRIMARY KEY (payment_id),
  CONSTRAINT fk_payment_rental FOREIGN KEY (rental_id) REFERENCES rental (rental_id),
  CONSTRAINT fk_payment_customer FOREIGN KEY (customer_id) REFERENCES customer (customer_id),
  CONSTRAINT fk_payment_staff FOREIGN KEY (staff_id) REFERENCES staff (staff_id)
);
create index idx_fk_staff_id on payment(staff_id);
create index idx_fk_customer_id on payment(customer_id);

CREATE TABLE film_actor (
  actor_id number(4,0) NOT NULL,
  film_id number(4,0) NOT NULL,
  last_update timestamp DEFAULT (current_timestamp) not null,
  CONSTRAINT "FILM_ACTOR_PK" PRIMARY KEY (actor_id, film_id),
  CONSTRAINT fk_film_actor_actor FOREIGN KEY (actor_id) REFERENCES actor (actor_id),
  CONSTRAINT fk_film_actor_film FOREIGN KEY (film_id) REFERENCES film (film_id)
);
CREATE INDEX  idx_fk_film_id1  ON film_actor(film_id);


----------------------------TRIGGERS----------------------------

------ATUALIZAR_TIME_STAMP-----------------------

create or replace trigger atualizar_actor before update on actor
for each row
begin
 :NEW.last_update:=current_timestamp;
end;

create or replace trigger atualizar_category before update on category
for each row
begin
 :NEW.last_update:=current_timestamp;
end;

create or replace trigger atualizar_language before update on language
for each row
begin
 :NEW.last_update:=current_timestamp;
end;

create or replace trigger atualizar_film before update on film
for each row
begin
 :NEW.last_update:=current_timestamp;
end;

create or replace trigger atualizar_film_category before update on film_category
for each row
begin
 :NEW.last_update:=current_timestamp;
end;

create or replace trigger atualizar_inventory before update on inventory
for each row
begin
 :NEW.last_update:=current_timestamp;
end;

create or replace trigger film_actor before update on film_actor
for each row
begin
 :NEW.last_update:=current_timestamp;
end;


------FIM_ATUALIZAR_TIME_STAMP-----------------------



CREATE or replace TRIGGER ins_film AFTER INSERT
ON film
FOR EACH ROW
BEGIN
    INSERT INTO film_text (film_id, title, description) VALUES (:new.film_id, :new.title, :new.description);
END;




alter table city modify (country_id null);
alter table city drop constraint FK_CITY_COUNTRY;
alter table city add constraint FK_CITY_COUNTRY FOREIGN KEY (country_id) REFERENCES country(country_id) on delete cascade;

alter table address modify (city_id null);
alter table address drop constraint FK_ADDRESS_CITY
alter table address add constraint FK_ADDRESS_CITY FOREIGN KEY (city_id) REFERENCES city(city_id) on delete cascade;

alter table customer modify (address_id null);
alter table customer drop constraint FK_CUSTOMER_ADDRESS
alter table customer add constraint FK_CUSTOMER_ADDRESS FOREIGN KEY (address_id) REFERENCES address(address_id) on delete set null;

alter table customer modify (store_id null);
alter table customer drop constraint fk_customer_store
alter table customer add constraint fk_customer_store FOREIGN KEY (store_id) REFERENCES store(store_id) on delete set null;


alter table store modify (MANAGER_STAFF_ID null);
alter table store drop constraint FK_STORE_STAFF;
alter table store add constraint FK_STORE_STAFF FOREIGN KEY (MANAGER_STAFF_ID) REFERENCES staff(staff_id) on delete set null;

alter table staff modify (ADDRESS_ID null);
alter table staff drop constraint FK_STAFF_ADDRESS;
alter table staff add constraint FK_STAFF_ADDRESS FOREIGN KEY (address_id) REFERENCES address(address_id) on delete set null;

alter table staff modify (store_ID null);
alter table staff drop constraint FK_STAFF_STORE;
alter table staff add constraint FK_STAFF_STORE FOREIGN KEY (store_id) REFERENCES store(store_id) on delete set null;

alter table payment modify (customer_id null);
alter table payment  drop constraint FK_PAYMENT_CUSTOMER;
alter table payment add constraint FK_PAYMENT_CUSTOMER FOREIGN KEY (customer_id) REFERENCES customer(customer_id) on delete set null;

alter table payment modify (staff_id null);
alter table payment  drop constraint FK_PAYMENT_STAFF;
alter table payment add constraint FK_PAYMENT_STAFF FOREIGN KEY (staff_id) REFERENCES staff(staff_id) on delete set null;

alter table payment modify (rental_id null);
alter table payment  drop constraint FK_PAYMENT_RENTAL;
alter table payment add constraint FK_PAYMENT_RENTAL FOREIGN KEY (rental_id) REFERENCES rental(rental_id) on delete set null;

--ver se faz sentido no contexto do projeto

alter table rental modify (customer_id null);
alter table rental  drop constraint FK_RENTAL_CUSTOMER;
alter table rental add constraint FK_RENTAL_CUSTOMER FOREIGN KEY (customer_id) REFERENCES customer(customer_id) on delete set null;

alter table rental modify (staff_id null);
alter table rental  drop constraint FK_RENTAL_STAFF;
alter table rental add constraint FK_RENTAL_STAFF FOREIGN KEY (staff_id) REFERENCES staff(staff_id) on delete set null;

alter table rental modify (inventory_id null);
alter table rental  drop constraint FK_RENTAL_INVENTORY;
alter table rental add constraint FK_RENTAL_INVENTORY FOREIGN KEY (inventory_id) REFERENCES inventory(inventory_id) on delete set null;

---fim ver--

alter table film modify (language_id null);
alter table film drop constraint FK_FILM_LANGUAGE;
alter table film add constraint FK_FILM_LANGUAGE FOREIGN KEY (language_id) REFERENCES language(language_id) on delete set null;

alter table film  drop constraint FK_FILM_LANGUAGE_ORIGINAL;
alter table film add constraint FK_FILM_LANGUAGE_ORIGINAL FOREIGN KEY (original_language_id) REFERENCES language(language_id) on delete set null;

--ver se esta correto--

alter table inventory modify (store_id null);
alter table inventory  drop constraint FK_INVENTORY_STORE;
alter table inventory add constraint FK_INVENTORY_STORE FOREIGN KEY (store_id) REFERENCES store(store_id) on delete set null;

--fim-ver--

  CREATE OR REPLACE TRIGGER del_film AFTER DELETE ON film
FOR EACH ROW
BEGIN
    DELETE FROM film_text WHERE film_id = :old.film_id;
    Delete from inventory where film_id=:old.film_id; -- acrescentei isto porque nao faz muito sentido termos ni inventorio um id de um livro que foi eliminado
 END;


CREATE or replace TRIGGER upd_film AFTER UPDATE ON film FOR EACH ROW BEGIN
    IF (:old.title != :new.title) OR (:old.description != :new.description) OR (:old.film_id != :new.film_id)
    THEN
        UPDATE film_text
            SET title=:new.title,
                description=:new.description,
                film_id=:new.film_id
        WHERE film_id=:old.film_id;
    END IF;
  END;






CREATE or replace TRIGGER update_country before Update ON Country FOR EACH ROW BEGIN
    if(:new.country_id!=:old.country_id) then
        Update city set country_id=:new.country_id where country_id=:old.country_id;

    end if;
  END;

CREATE or replace TRIGGER update_address before Update ON address FOR EACH ROW BEGIN
    if(:new.address_id!=:old.address_id) then
        Update customer set address_id=:new.address_id where address_id=:old.address_id;

    end if;
  END;

CREATE or replace TRIGGER update_city before Update ON City FOR EACH ROW BEGIN
    if(:new.city_id!=:old.city_id) then
        Update address set city_id=:new.city_id where city_id=:old.city_id;

    end if;
  END;



 -----------------------------VIEWS---------------------------------------

CREATE VIEW customer_list
AS
SELECT cu.customer_id AS ID, CONCAT(cu.first_name,CONCAT(' ', cu.last_name)) AS name, a.address AS address, a.postal_code AS zip_code,
	a.phone AS phone, city.city AS city, country.country AS country, case when cu.active=1 then'active'else''end as Notes, cu.store_id AS SID
FROM customer cu JOIN address a ON cu.address_id = a.address_id JOIN city ON a.city_id = city.city_id
	JOIN country ON city.country_id = country.country_id;


CREATE VIEW film_list
AS
SELECT film.film_id AS FID, film.title AS title, film.description AS description, category.name AS category, film.rental_rate AS price,
	film.length AS length, film.rating AS rating, listagg(actor.first_name, ',') WITHIN GROUP (ORDER BY actor.first_name) as actors
FROM category LEFT JOIN film_category ON category.category_id = film_category.category_id LEFT JOIN film ON film_category.film_id = film.film_id
        JOIN film_actor ON film.film_id = film_actor.film_id
	JOIN actor ON film_actor.actor_id = actor.actor_id
GROUP BY film.film_id, category.name, film.title, film.description, film.rental_rate,
film.length, film.rating;


CREATE VIEW nicer_but_slower_film_list
AS
SELECT film.film_id AS FID, film.title AS title, film.description AS description, category.name AS category, film.rental_rate AS price,
	film.length AS length, film.rating AS rating, listagg(UPPER(SUBSTR(actor.first_name,1,1))||
	LOWER(SUBSTR(actor.first_name,2,LENGTH(actor.first_name)))||' '||UPPER(SUBSTR(actor.last_name,1,1))||
	LOWER(SUBSTR(actor.last_name,2,LENGTH(actor.last_name))), ', ') WITHIN GROUP ( order by UPPER(SUBSTR(actor.first_name,1,1))||
	LOWER(SUBSTR(actor.first_name,2,LENGTH(actor.first_name)))||' '||UPPER(SUBSTR(actor.last_name,1,1))||
	LOWER(SUBSTR(actor.last_name,2,LENGTH(actor.last_name))), ', ') AS actors
FROM category LEFT JOIN film_category ON category.category_id = film_category.category_id LEFT JOIN film ON film_category.film_id = film.film_id
        JOIN film_actor ON film.film_id = film_actor.film_id
	JOIN actor ON film_actor.actor_id = actor.actor_id
GROUP BY film.film_id, category.name, film.title, film.description, film.rental_rate,
film.length, film.rating;

CREATE VIEW staff_list
AS
SELECT s.staff_id AS ID, s.first_name||' '|| s.last_name AS name, a.address AS address, a.postal_code AS zip_code, a.phone AS phone,
	city.city AS city, country.country AS country, s.store_id AS SID
FROM staff s JOIN address a ON s.address_id = a.address_id JOIN city ON a.city_id = city.city_id
	JOIN country ON city.country_id = country.country_id;

CREATE VIEW sales_by_store
AS
SELECT
c.city || ',' || cy.country AS store
, m.first_name || ' ' || m.last_name AS manager
, SUM(p.amount) AS total_sales
FROM payment  p
INNER JOIN rental  r ON p.rental_id = r.rental_id
INNER JOIN inventory  i ON r.inventory_id = i.inventory_id
INNER JOIN store  s ON i.store_id = s.store_id
INNER JOIN address  a ON s.address_id = a.address_id
INNER JOIN city  c ON a.city_id = c.city_id
INNER JOIN country  cy ON c.country_id = cy.country_id
INNER JOIN staff  m ON s.manager_staff_id = m.staff_id
GROUP BY s.store_id, c.CITY, cy.COUNTRY, m.FIRST_NAME, m.LAST_NAME, p.AMOUNT
ORDER BY cy.country, c.city;

CREATE VIEW sales_by_film_category
AS
SELECT
c.name AS category
, SUM(p.amount) AS total_sales
FROM payment  p
INNER JOIN rental  r ON p.rental_id = r.rental_id
INNER JOIN inventory  i ON r.inventory_id = i.inventory_id
INNER JOIN film  f ON i.film_id = f.film_id
INNER JOIN film_category  fc ON f.film_id = fc.film_id
INNER JOIN category  c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY total_sales DESC;


----------------END VIEWS----------------------------------



---------Procedures and Functions------------------------------------


CREATE OR REPLACE FUNCTION inventory_in_stock(p_inventory_id number) RETURN char is
v_rentals number;
v_out     number;
BEGIN
    --AN ITEM IS IN-STOCK IF THERE ARE EITHER NO ROWS IN THE rental TABLE
    --FOR THE ITEM OR ALL ROWS HAVE return_date POPULATED

    SELECT COUNT(*) INTO v_rentals
    FROM rental
    WHERE inventory_id = p_inventory_id;

    IF v_rentals = 0 THEN
     RETURN '1';
    END IF;

    SELECT COUNT(rental_id) INTO v_out
    FROM inventory LEFT JOIN rental  on inventory.inventory_id = p_inventory_id
    where rental.return_date IS NULL;

    IF v_out > 0 THEN
      return '0';
    ELSE
     RETURN '1';
    END IF;
END;






CREATE OR REPLACE PROCEDURE rewards_report( min_monthly_purchases in number, min_dollar_amount_purchased in number, count_rewardees out number) IS
    last_month_start date;
    last_month_end date;
    BEGIN

    /* Some sanity checks... */
    --SET SERVEROUTPUT ON ---PARA O OUTPUT STRING
    IF min_monthly_purchases = 0 THEN
        BEGIN
        Dbms_Output.Put_Line('Minimum monthly purchases parameter must be > 0');
        END;
        RETURN;
    END IF;
    IF min_dollar_amount_purchased = 0.00 THEN
        BEGIN
        Dbms_Output.Put_Line('Minimum monthly dollar amount purchased parameter must be > $0.00');
        END;
        Return;
    END IF;

    /* Determine start and end time periods */
    SELECT TO_DATE(to_char(sysdate, 'YYYY')||'-'||to_char(add_months(sysdate,-1),'MM')||'-01','YYYY-MM-DD') INTO last_month_start FROM DUAL;
    SELECT LAST_DAY(last_month_start) INTO last_month_end FROM DUAL;
    /*
        Find all customers meeting the
        monthly purchase requirements
    */
   /* Populate OUT parameter with count of found customers */
    WITH tmpCustomer AS
    (SELECT p.customer_id
    FROM payment p
    WHERE p.payment_date BETWEEN last_month_start AND last_month_end
    GROUP BY customer_id
    HAVING SUM(p.amount) > min_dollar_amount_purchased
    AND COUNT(customer_id) > min_monthly_purchases)
    SELECT COUNT(*) INTO count_rewardees FROM tmpCustomer;

END;






CREATE OR REPLACE PROCEDURE film_in_stock(p_film_id number, p_store_id number,  p_film_count OUT number) As
BEGIN
     SELECT COUNT(*) INTO p_film_count FROM inventory
     WHERE film_id = p_film_id
     AND store_id = p_store_id
     AND inventory_in_stock(inventory_id)='1';
END;






CREATE OR REPLACE PROCEDURE film_not_in_stock(p_film_id number, p_store_id number, p_film_count out number)
As
BEGIN
     SELECT count(*) INTO p_film_count FROM inventory
     WHERE film_id = p_film_id
     AND store_id = p_store_id
     AND inventory_in_stock(inventory_id) = '0';
END;



CREATE OR REPLACE FUNCTION inventory_held_by_customer(p_inventory_id number) RETURN Number is
v_customer_id number;
BEGIN

  SELECT customer_id INTO v_customer_id
  FROM rental
  WHERE return_date IS NULL
  AND inventory_id = p_inventory_id;

  IF v_customer_id is not null THEN
      RETURN v_customer_id;
    ELSE
     RETURN NULL;
    END IF;

END;

CREATE OR REPLACE FUNCTION get_customer_balance(p_customer_id NUMBER, p_effective_date TIMESTAMP) RETURN NUMBER  IS

  v_rentfees NUMBER(5,2); --FEES PAID TO RENT THE VIDEOS INITIALLY
  v_overfees NUMBER;      --LATE FEES FOR PRIOR RENTALS
  v_payments NUMBER(5,2); --SUM OF PAYMENTS MADE PREVIOUSLY
BEGIN

       --OK, WE NEED TO CALCULATE THE CURRENT BALANCE GIVEN A CUSTOMER_ID AND A DATE
       --THAT WE WANT THE BALANCE TO BE EFFECTIVE FOR. THE BALANCE IS:
       --   1) RENTAL FEES FOR ALL PREVIOUS RENTALS
       --   2) ONE DOLLAR FOR EVERY DAY THE PREVIOUS RENTALS ARE OVERDUE
       --   3) IF A FILM IS MORE THAN RENTAL_DURATION * 2 OVERDUE, CHARGE THE REPLACEMENT_COST
       --   4) SUBTRACT ALL PAYMENTS MADE BEFORE THE DATE SPECIFIED

  SELECT NVL(SUM(film.rental_rate),0) INTO v_rentfees
    FROM film, inventory, rental
    WHERE film.film_id = inventory.film_id
      AND inventory.inventory_id = rental.inventory_id
      AND rental.rental_date <= p_effective_date
      AND rental.customer_id = p_customer_id;

    SELECT NVL(SUM(CASE WHEN TO_NUMBER(r.return_date - r.rental_date) > f.rental_duration THEN
    TO_NUMBER(r.return_date - r.rental_date) - f.rental_duration ELSE 0 END),0) INTO v_overfees
    FROM rental r, inventory i, film f
    WHERE f.film_id = i.film_id
      AND i.inventory_id = r.inventory_id
      AND r.rental_date <= p_effective_date
      AND r.customer_id = p_customer_id;


  SELECT NVL(SUM(P.amount),0) INTO v_payments
    FROM payment p
    WHERE p.payment_date <= p_effective_date
    AND p.customer_id = p_customer_id;

  RETURN v_rentfees + v_overfees - v_payments;
END;

------------END---------------------------------------------------------------------
